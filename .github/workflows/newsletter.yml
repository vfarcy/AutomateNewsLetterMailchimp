# Nom de notre automatisation
name: Envoyer la Newsletter avec Mailchimp (avec Test et Nettoyage)

# Déclencheur : s'exécute quand on ajoute un fichier .md dans le dossier 'newsletters'
on:
  push:
    branches:
      - main
    paths:
      - 'newsletters/**.md'

# Les tâches à exécuter
jobs:
  # TÂCHE 1 : CONSTRUIRE LA CAMPAGNE ET ENVOYER UN TEST
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      campaign_id: ${{ steps.create_campaign.outputs.campaign_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown beautifulsoup4

      - name: Create Campaign and Add Content
        id: create_campaign
        run: |
          python -c "
          import os, requests, json, markdown
          from bs4 import BeautifulSoup
          # ... (tout le code Python pour créer la campagne et injecter le contenu) ...
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          AUDIENCE_ID = os.environ.get('MAILCHIMP_AUDIENCE_ID')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          TEMPLATE_ID = int(os.environ.get('MAILCHIMP_TEMPLATE_ID'))
          MC_EDIT_REGION_NAME = 'main_content'
          NEWSLETTER_FILE = '$(git diff-tree --no-commit-id --name-only -r HEAD | grep 'newsletters/.*\.md$')'
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          with open(NEWSLETTER_FILE, 'r', encoding='utf-8') as f:
              html_content = markdown.markdown(f.read())
          soup = BeautifulSoup(html_content, 'html.parser')
          email_subject = soup.find('h1').text if soup.find('h1') else 'Ma Nouvelle Newsletter'
          print(f'Sujet de l\'email détecté : {email_subject}')
          campaign_data = {'type': 'regular', 'recipients': {'list_id': AUDIENCE_ID}, 'settings': {'subject_line': email_subject, 'from_name': 'Le Nom de votre Newsletter', 'reply_to': 'votre.email@reponse.com', 'template_id': TEMPLATE_ID}}
          try:
              r = requests.post(f'{API_URL}/campaigns', headers=HEADERS, json=campaign_data)
              r.raise_for_status()
              campaign_id = r.json()['id']
              print(f'Campagne créée avec succès. ID : {campaign_id}')
              print(f'::set-output name=campaign_id::{campaign_id}')
          except Exception as e:
              print(f'Erreur lors de la création de la campagne: {e}'); exit(1)
          content_data = {'template': {'id': TEMPLATE_ID, 'sections': {MC_EDIT_REGION_NAME: html_content}}}
          try:
              requests.put(f'{API_URL}/campaigns/{campaign_id}/content', headers=HEADERS, json=content_data).raise_for_status()
              print('Contenu injecté dans le template avec succès.')
          except Exception as e:
              print(f'Erreur lors de l\'injection du contenu: {e}'); exit(1)
          "
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_AUDIENCE_ID: ${{ secrets.MAILCHIMP_AUDIENCE_ID }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          MAILCHIMP_TEMPLATE_ID: ${{ secrets.MAILCHIMP_TEMPLATE_ID }}

      - name: Send Test Email
        run: |
          CAMPAIGN_ID=${{ steps.create_campaign.outputs.campaign_id }}
          TEST_EMAILS='${{ secrets.MAILCHIMP_TEST_EMAIL }}'.split(',')
          import os, requests, json
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          test_data = {'test_emails': TEST_EMAILS, 'send_type': 'html'}
          try:
              requests.post(f'{API_URL}/campaigns/{CAMPAIGN_ID}/actions/test', headers=HEADERS, json=test_data).raise_for_status()
              print(f"Email de test envoyé avec succès à : {TEST_EMAILS}")
          except Exception as e:
              print(f"Erreur lors de l'envoi du test : {e}"); exit(1)
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          MAILCHIMP_TEST_EMAIL: ${{ secrets.MAILCHIMP_TEST_EMAIL }}

  # TÂCHE 2 : ENVOYER LA CAMPAGNE EN PRODUCTION
  send_to_production:
    needs: build_and_test
    environment: Production # On lie au sas de sécurité
    runs-on: ubuntu-latest
    steps:
      - name: Send Final Campaign
        run: |
          # ... (script pour l'envoi final) ...
          CAMPAIGN_ID=${{ needs.build_and_test.outputs.campaign_id }}
          import os, requests
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          try:
              requests.post(f'{API_URL}/campaigns/{CAMPAIGN_ID}/actions/send', headers=HEADERS).raise_for_status()
              print('Approbation reçue ! La campagne est en cours d\'envoi final.')
          except Exception as e:
              print(f"Erreur lors de l'envoi final : {e}"); exit(1)
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}

      - name: Cleanup Campaign on Rejection
        if: failure() # Ne s'exécute que si on rejette !
        run: |
          # ... (script pour supprimer la campagne brouillon) ...
          CAMPAIGN_ID=${{ needs.build_and_test.outputs.campaign_id }}
          import os, requests
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          print(f"Le déploiement a été rejeté. Suppression de la campagne brouillon ID : {CAMPAIGN_ID}")
          try:
              requests.delete(f'{API_URL}/campaigns/{CAMPAIGN_ID}', headers=HEADERS).raise_for_status()
              print('Campagne brouillon supprimée avec succès de Mailchimp.')
          except Exception as e:
              print(f"Erreur lors de la suppression de la campagne brouillon : {e}")
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}