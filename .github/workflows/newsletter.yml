name: Envoyer la Newsletter avec Mailchimp (avec Test et Nettoyage)

# Se déclenche quand un fichier .md est modifié ou ajouté dans le dossier 'newsletters'
on:
  push:
    branches:
      - main
    paths:
      - 'newsletters/**.md'

jobs:
  # TÂCHE 1 : CONSTRUIRE LA CAMPAGNE ET ENVOYER UN TEST
  build_and_test:
    runs-on: ubuntu-latest
    # Les "outputs" permettent de passer des informations à la tâche suivante
    outputs:
      campaign_id: ${{ steps.create_campaign.outputs.campaign_id }}
      skipped: ${{ steps.create_campaign.outputs.skipped }}
    steps:
      # Étape 1.1 : Récupère le code de votre dépôt
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # On récupère tout l'historique pour pouvoir faire la comparaison entre les commits
          fetch-depth: 0

      # Étape 1.2 : Configure l'environnement Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Étape 1.3 : Installe les outils Python nécessaires
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown beautifulsoup4

      # Étape 1.4 : Crée la campagne, injecte le contenu (AVEC LOGS DE DÉBOGAGE)
      - name: Create Campaign and Add Content
        id: create_campaign
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_AUDIENCE_ID: ${{ secrets.MAILCHIMP_AUDIENCE_ID }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          MAILCHIMP_TEMPLATE_ID: ${{ secrets.MAILCHIMP_TEMPLATE_ID }}
          MAILCHIMP_FROM_NAME: ${{ secrets.MAILCHIMP_FROM_NAME }}
          MAILCHIMP_REPLY_TO_EMAIL: ${{ secrets.MAILCHIMP_REPLY_TO_EMAIL }}
          BEFORE_SHA: ${{ github.event.before }}
          AFTER_SHA: ${{ github.event.after }}
        run: |
          python -c "
          import os, sys, requests, json, markdown, subprocess
          from bs4 import BeautifulSoup

          # --- VÉRIFICATION DU FICHIER ---
          newsletter_file = None
          try:
              before_sha = os.environ.get('BEFORE_SHA')
              after_sha = os.environ.get('AFTER_SHA')
              git_command = f'git diff --name-only {before_sha} {after_sha} | grep \"newsletters/.*\\.md$\"'
              result = subprocess.run(git_command, shell=True, check=True, capture_output=True, text=True)
              newsletter_file = result.stdout.strip().split('\n')[0]
          except (subprocess.CalledProcessError, IndexError):
              pass
          
          if not newsletter_file:
              print('Aucun fichier .md trouvé dans les commits de ce push. Annulation du workflow.')
              print(f'::set-output name=skipped::true')
              sys.exit(0)

          print(f'Fichier de newsletter trouvé : {newsletter_file}')
          print(f'::set-output name=skipped::false')

          # --- CONFIGURATION ---
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          AUDIENCE_ID = os.environ.get('MAILCHIMP_AUDIENCE_ID')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          TEMPLATE_ID = int(os.environ.get('MAILCHIMP_TEMPLATE_ID'))
          MC_EDIT_REGION_NAME = 'main_content'
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          from_name = os.environ.get('MAILCHIMP_FROM_NAME')
          reply_to_email = os.environ.get('MAILCHIMP_REPLY_TO_EMAIL')

          # --- LECTURE ET CONVERSION ---
          with open(newsletter_file, 'r', encoding='utf-8') as f:
              html_content = markdown.markdown(f.read())
          
          # --- LOG DE DÉBOGAGE N°1 ---
          print('--- DEBUT DU CONTENU HTML CONVERTI ---')
          print(html_content)
          print('--- FIN DU CONTENU HTML CONVERTI ---')

          soup = BeautifulSoup(html_content, 'html.parser')
          email_subject = soup.find('h1').text if soup.find('h1') else 'Ma Nouvelle Newsletter'
          print(f'Sujet de l\'email détecté : {email_subject}')
          
          # --- CRÉATION DE LA CAMPAGNE ---
          campaign_data = {'type': 'regular', 'recipients': {'list_id': AUDIENCE_ID}, 'settings': {'subject_line': email_subject, 'from_name': from_name, 'reply_to': reply_to_email, 'template_id': TEMPLATE_ID}}
          try:
              r = requests.post(f'{API_URL}/campaigns', headers=HEADERS, json=campaign_data)
              r.raise_for_status()
              campaign_id = r.json()['id']
              print(f'Campagne créée avec succès. ID : {campaign_id}')
              print(f'::set-output name=campaign_id::{campaign_id}')
          except Exception as e:
              print(f'Erreur lors de la création de la campagne: {e}'); sys.exit(1)
          
          # --- INJECTION DU CONTENU ---
          content_data = {'template': {'id': TEMPLATE_ID, 'sections': {MC_EDIT_REGION_NAME: html_content}}}
          
          # --- LOG DE DÉBOGAGE N°2 ---
          print('--- DEBUT DES DONNÉES ENVOYÉES À MAILCHIMP ---')
          print(json.dumps(content_data, indent=2))
          print('--- FIN DES DONNÉES ENVOYÉES À MAILCHIMP ---')
          
          try:
              requests.put(f'{API_URL}/campaigns/{campaign_id}/content', headers=HEADERS, json=content_data).raise_for_status()
              print('Contenu injecté dans le template avec succès.')
          except Exception as e:
              print(f'Erreur lors de l\'injection du contenu: {e}'); sys.exit(1)
          "

      # Étape 1.5 : Envoyer l'e-mail de test
      - name: Send Test Email
        if: steps.create_campaign.outputs.skipped != 'true'
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          MAILCHIMP_TEST_EMAIL: ${{ secrets.MAILCHIMP_TEST_EMAIL }}
          CAMPAIGN_ID: ${{ steps.create_campaign.outputs.campaign_id }}
        run: |
          python -c "
          import os, requests, json, sys

          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          CAMPAIGN_ID = os.environ.get('CAMPAIGN_ID')
          test_emails_str = os.environ.get('MAILCHIMP_TEST_EMAIL')
          test_emails_list = test_emails_str.split(',')
          
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          
          test_data = {'test_emails': test_emails_list, 'send_type': 'html'}
          
          try:
              requests.post(f'{API_URL}/campaigns/{CAMPAIGN_ID}/actions/test', headers=HEADERS, json=test_data).raise_for_status()
              print(f'Email de test envoyé avec succès à : {test_emails_list}')
          except Exception as e:
              print(f'Erreur lors de l\'envoi du test : {e}'); sys.exit(1)
          "

  # TÂCHE 2 : ENVOYER LA CAMPAGNE EN PRODUCTION (APRÈS APPROBATION)
  send_to_production:
    needs: build_and_test
    if: needs.build_and_test.outputs.skipped != 'true'
    environment: Production
    runs-on: ubuntu-latest
    steps:
      # Étape 2.1 : Envoi de la campagne finale
      - name: Send Final Campaign
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          CAMPAIGN_ID: ${{ needs.build_and_test.outputs.campaign_id }}
        run: |
          python -c "
          import os, requests, sys
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          CAMPAIGN_ID = os.environ.get('CAMPAIGN_ID')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          try:
              requests.post(f'{API_URL}/campaigns/{CAMPAIGN_ID}/actions/send', headers=HEADERS).raise_for_status()
              print('Approbation reçue ! La campagne est en cours d\'envoi final.')
          except Exception as e:
              print(f'Erreur lors de l\'envoi final : {e}'); sys.exit(1)
          "

      # Étape 2.2 : Nettoyage en cas de rejet manuel
      - name: Cleanup Campaign on Rejection
        # Se déclenche si vous cliquez sur "Reject" (le job est alors "annulé")
        if: cancelled()
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          CAMPAIGN_ID: ${{ needs.build_and_test.outputs.campaign_id }}
        run: |
          python -c "
          import os, requests
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          CAMPAIGN_ID = os.environ.get('CAMPAIGN_ID')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          print(f'Le déploiement a été rejeté. Suppression de la campagne brouillon ID : {CAMPAIGN_ID}')
          try:
              requests.delete(f'{API_URL}/campaigns/{CAMPAIGN_ID}', headers=HEADERS).raise_for_status()
              print('Campagne brouillon supprimée avec succès de Mailchimp.')
          except Exception as e:
              print(f'Erreur lors de la suppression de la campagne brouillon : {e}')
          "


          


